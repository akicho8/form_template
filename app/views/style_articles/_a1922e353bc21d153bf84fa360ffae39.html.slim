script#any_input(type="text/x-template")
  div
    .form-group(v-for="elem in all")
      label.col-md-2.control-label
        template(v-if="$root.real_value")
          | {{_.kebabCase(elem.key)}}
        template(v-else)
          | {{elem.desc}}
      .col-md-10
        template(v-if="elem.list")
          template(v-for="e in elem.list")
            label.radio-inline
              input(type="radio" v-model="$root[elem.key]" :value="e.value" :disabled="elem.disabled($root)")
              template(v-if="$root.real_value")
                | {{e.value}}
              template(v-else)
                | {{e.desc || e.value}}
        template(v-if="elem.range")
          input(type="range" v-model.number="$root[elem.key]" :min="elem.range.min" :max="elem.range.max" step="1")
          | {{$root[elem.key]}}

#app
  .box_wrap
    .app_container(:style="style")
      .item(v-for="i in boxCount" :class="item_class(i)" @click="active_toggle(i)" :style="item_style(i)")
        | {{i}}

  .form-horizontal
    .form-group
      label.col-md-2.control-label 個数
      .col-md-10
        input(type="range" v-model.number="boxCount" min="1" max="50" step="1")
    any_input(:all="flex_container_list")

    template(v-if="active_item")
      p
        | 子要素
      any_input(:all="flex_item_list")

    .form-group
      .col-md-offset-2.col-md-10
        label.checkbox-inline
          input(type="checkbox" v-model="real_value")
          | 実際値
        label.checkbox-inline
          input(type="checkbox" v-model="show_all")
          | 初期値も表示

    .form-group
      label.col-md-2.control-label サイズ
      .col-md-10
        | 親
        input(type="text" v-model.trim="parent_w" size="4")
        = " x "
        input(type="text" v-model.trim="parent_h" size="4")
        == "&nbsp;&nbsp;"
        | 子
        input(type="text" v-model.trim="item_w" size="4")
        = " x "
        input(type="text" v-model.trim="item_h" size="4")

  pre
    | {{flex_css}}

  ul
    li 子要素にサイズが指定されていると伸びない
    li 並び↓のとき3時の方向を上と考える
    li 並び↑のとき9時の方向を上と考える
    li 折り返さないとき「行」の効果はない

javascript:
  new Vue({
    components: {
      "any_input": {
        template: '#any_input',
        props: [
          "all"
        ],
      },
    },
    el: "#app",
    data: {
      boxCount: 5,
      real_value: false,
      active_item: null,
      show_all: false,
      parent_w: "300",
      parent_h: "185",
      item_w: "",
      item_h: "",

      // 親
      flexDirection: "row",
      flexWrap: "nowrap",
      justifyContent: "flex-start",
      alignItems: "stretch",
      alignContent: "stretch",

      // 子
      order: 0,
      alignSelf: "auto",
      flexGrow: "",
      flexShrink: "",

      flex_container_list: [
        {
          key: "flexDirection",
          desc: "並び",
          disabled: () => false,
          list: [
            { value: "row",            desc: "→", },
            { value: "row-reverse",    desc: "←", },
            { value: "column",         desc: "↓", },
            { value: "column-reverse", desc: "↑", },
          ],
        },
        {
          key: "flexWrap",
          desc: "折り返し",
          disabled: () => false,
          list: [
            { value: "nowrap",       desc: "無", },
            { value: "wrap",         desc: "↓", },
            { value: "wrap-reverse", desc: "↑", },
          ],
        },
        {
          key: "justifyContent",
          desc: "X",
          disabled: () => false,
          list: [
            { value: "flex-start",    desc: "左", },
            { value: "center",        desc: "中", },
            { value: "space-between", desc: "端", },
            { value: "space-around",  desc: "散", },
            { value: "flex-end",      desc: "右", },
          ],
        },
        {
          key: "alignItems",
          desc: "Y",
          disabled: () => false,
          list: [
            { value: "stretch",    desc: "伸",   },
            { value: "flex-start", desc: "上",   },
            { value: "baseline",   desc: "上隙", },
            { value: "center",     desc: "中",   },
            { value: "flex-end",   desc: "下",   },
          ],
        },
        {
          key: "alignContent",
          desc: "行",
          disabled: e => e.flexWrap === 'nowrap',
          list: [
            { value: "stretch",       desc: "伸", },
            { value: "center",        desc: "中", },
            { value: "flex-start",    desc: "上", },
            { value: "flex-end",      desc: "下", },
            { value: "space-around",  desc: "散", },
            { value: "space-between", desc: "端", },
          ],
        },
      ],

      flex_item_list: [
        {
          key: "order",
          desc: "順",
          disabled: () => false,
          range: {
            min: -3,
            max: 3,
          },
        },
        {
          key: "alignSelf",
          desc: "Y",
          desc2: "alignItems は全体だが alignSelf は個別に設定する",
          disabled: () => false,
          list: [
            { value: "auto",       desc: "自動"  },
            { value: "stretch",    desc: "伸",   },
            { value: "flex-start", desc: "上",   },
            { value: "baseline",   desc: "上隙", },
            { value: "center",     desc: "中",   },
            { value: "flex-end",   desc: "下",   },
          ],
        },
        {
          key: "flexGrow",
          desc: "膨率",
          disabled: () => false,
          list: [
            { value: "",  desc: "無" },
            { value: "1",            },
            { value: "2",            },
            { value: "3",            },
            { value: "4",            },
            { value: "5",            },
          ],
        },
        {
          key: "flexShrink",
          desc: "縮率",
          disabled: () => false,
          list: [
            { value: "",  desc: "無" },
            { value: "1",            },
            { value: "2",            },
            { value: "3",            },
            { value: "4",            },
            { value: "5",            },
          ],
        },
      ],
    },

    methods: {
      item_class(i) {
        const list = []
        list.push(`size${(i - 1) % 3}`)
        if (this.active_item === i) {
          list.push("active")
        }
        return list
      },

      active_toggle(i) {
        if (this.active_item === i) {
          this.active_item = null
        } else {
          this.active_item = i
        }
      },

      item_style(i) {
        const hash = {}
        if (this.item_w !== "") {
          hash["width"] = `${this.item_w}px`
        }
        if (this.item_h !== "") {
          hash["height"] = `${this.item_h}px`
        }
        if (this.active_item === i) {
          if (this.order !== "0") {
            hash["order"] = this.order
          }
          hash["alignSelf"]  = this.alignSelf
          hash["flexGrow"]   = this.flexGrow
          hash["flexShrink"] = this.flexShrink
        }
        return hash
      },
    },
    computed: {
      style() {
        const hash = {}
        if (this.parent_w !== "") {
          hash["width"] = `${this.parent_w}px`
        }
        if (this.parent_h !== "") {
          hash["height"] = `${this.parent_h}px`
        }
        Object.assign(hash, {
          flexDirection: this.flexDirection,
          flexWrap: this.flexWrap,
          justifyContent: this.justifyContent,
          alignItems: this.alignItems,
          alignContent: this.alignContent,
        })
        return hash
      },

      flex_css() {
        let str = ""
        if (this.show_all || this.flexDirection !== 'row') {
          str += `flex-direction: ${this.flexDirection}\n`
        }
        if (this.show_all || this.flexWrap !== 'nowrap') {
          str += `flex-wrap: ${this.flexWrap}\n`
        }
        if (this.show_all || this.justifyContent !== 'flex-start') {
          str += `justify-content: ${this.justifyContent}\n`
        }
        if (this.show_all || this.alignItems !== 'stretch') {
          str += `align-items: ${this.alignItems}\n`
        }
        if (this.show_all || this.flexWrap !== 'nowrap') {
          if (this.show_all || this.alignContent !== 'stretch') {
            str += `align-content: ${this.alignContent}\n`
          }
        }
        if (this.active_item) {
          str += `.item:nth-child(${this.active_item}})`
          if (this.show_all || this.order !== 0) {
            str += `  order: ${this.order}\n`
          }
          if (this.show_all || this.flexGrow) {
            str += `  flex-grow: ${this.flexGrow}\n`
          }
          if (this.show_all || this.flexShrink) {
            str += `  flex-shrink: ${this.flexShrink}\n`
          }
          str += `  align-self: ${this.alignSelf}\n`
        }
        return str
      },
    },
  })

sass:
  .box_wrap
    display: flex
    justify-content: center
    align-items: center
    .app_container
      user-select: none
      border: 1px solid blue
      .item
        border: 1px solid blue
        padding: 0.2em
        &.active
          background: #eee

  .size0
    font-size: 1.0em
  .size1
    font-size: 1.5em
  .size2
    font-size: 2.0em

  .app_container
    display: inline-flex

  input[type="range"]
    display: inline
    width: 50%
