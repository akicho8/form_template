#app
  template v-if="mode == 'ready'"
    .btn.btn-primary @click="ready_go" = "Ready Go!!"

  template v-if="mode == 'running'"
    input.form-control v-model="input_value" @keyup="keyup_func" ref="r1"

  template v-if="mode == 'goal'"
    .btn.btn-primary @click="ready_go" = "もう一度プレイ"

  p
    div= "正解: {{o_count}}"
    div= "誤答: {{x_count}}"
    div= "時間: {{timer_count_to_s()}}"
    progress :value="answerd_count / question_max" style="width: 256px"

  .shogi_board
    table.table.table-striped.table-bordered.table-hover.table-condensed
      ul.list-group
        tr v-for="y in board_size"
          template v-for="x in board_size"
            td :class="cell_class(x - 1, y - 1)"
              template v-if="is_active(x - 1, y - 1)"
                = "玉"
              template v-else=""
                == "&nbsp;"

javascript:
  const vm = new Vue({
    el: "#app",
    data: {
      board_size: 9,
      current_x: null,
      current_y: null,
      mode: "ready",
      input_value: null,
      hairetu: [],
      o_count: 0,
      x_count: 0,
      answerd_count: null,
      question_max: null,
      timer_run: false,
      timer_count: null,
    },

    created: function() {
      setInterval(() => {
        if (this.timer_run) {
          this.timer_count++
        }
      }, 10)
    },

    methods: {
      keyup_func: function() {
        if (this.input_value.length >= 2) {
          const x = parseInt(this.input_value[0])
          const y = parseInt(this.input_value[1])
          if (this.is_active(this.board_size - x, y - 1)) {
            this.hairetu.push(1)
            this.o_count++
          } else {
            this.hairetu.push(0)
            this.x_count++
          }
          this.answerd_count++
          if (this.question_max <= this.answerd_count) {
            this.mode = "goal"
            this.timer_run = false
          } else {
            this.question_reset()
          }
        }
      },

      ready_go: function() {
        this.mode = "running"
        this.timer_run = true
        this.timer_count = 0
        this.answerd_count = 0
        this.question_max = this.board_size * this.board_size
        this.$nextTick(function () { this.$refs.r1.focus() })
        this.question_reset()
      },

      question_reset: function() {
        this.current_x = this.random_pos()
        this.current_y = this.random_pos()
        this.input_value = ""
      },

      cell_class: function(x, y) {
        let str = null
        if (this.is_active(x, y)) {
          str = ["cell_active"]
        } else {
          str = ["cell_blank"]
        }
        return str
      },

      is_active: function(x, y) {
        return this.current_x == x && this.current_y == y
      },

      random_pos: function() {
        return Math.floor(Math.random() * this.board_size)
      },

      timer_count_to_s: function() {
        const column = 100
        const ss = Math.floor(this.timer_count / column)
        const ms = ("00" + (this.timer_count % column)).slice(-2)
        return `${ss}.${ms} 秒`
      },
    },
  })

sass:
  .shogi_board
    .cell_active
      border: 1px solid blue
